C51 COMPILER V9.60.0.0   DS18B20                                                           05/19/2021 23:08:33 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Objects\DS18B20.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE DS18B20.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\D
                    -S18B20.lst) TABS(2) OBJECT(.\Objects\DS18B20.obj)

line level    source

   1          #include "DS18B20.h"
   2          #include "delay.h"
   3          
   4          
   5          uchar code fractioncode[]={0,0,1,2,2,3,4,4,5,6,6,7,8,8,9,9};
   6          
   7          
   8          //void dsreset(void)    //18B20复位，初始化函数
   9          //{
  10          //  ds=0;
  11          //  Delay1us(600);//至少延时480us
  12          //  ds=1;
  13          //  
  14          //  while(ds)//等待器件应答，约15~60us之后
  15          //  putchar(0xaa);
  16          //  while(!ds);//应答秒冲出现之后，等待器件拉高约60~240us后
  17          //  putchar(0xbb);
  18          //}
  19          
  20          uchar dsreset(void)   //18B20复位，初始化函数
  21          {
  22   1      uchar status;
  23   1          ds = 1;        // 检测到下降沿，初始化
  24   1          Delay2us(16);
  25   1          ds = 0;
  26   1          Delay2us(90);
  27   1          ds = 1;
  28   1          Delay2us(8);
  29   1        status=ds;
  30   1          Delay2us(100);
  31   1          ds = 1;
  32   1        return status;
  33   1      }
  34          
  35          uchar tempread(void)   //读数据函数
  36          {
  37   1         uchar i,rdata=0;
  38   1         for(i=0;i<8;i++)
  39   1         {
  40   2             ds=0;
  41   2             Delay2us(2);//至少延时1us
  42   2             ds=1;//释放总线控制权，15s内要读取数据
  43   2           _nop_();
  44   2           _nop_();
  45   2             if(ds==1) 
  46   2               rdata|=0x01<<i;//读出的数据最低位在最前面，这样刚好一个字节在rdata里
  47   2             Delay1us(30);//延时要大于45us，读0时，45us后器件才拉高总线
  48   2            ds=1; 
  49   2         }
  50   1         return rdata;
  51   1      }
  52          
  53          void tempwritebyte(unsigned char com)   //向18B20写一个字节数据
  54          {
C51 COMPILER V9.60.0.0   DS18B20                                                           05/19/2021 23:08:33 PAGE 2   

  55   1            uchar i;
  56   1         for(i=0;i<8;i++)
  57   1          {
  58   2              ds=0;//开始写操作;
  59   2              //Delay1us(2);//至少延时1us
  60   2              ds=com&0x01;//开始写数据
  61   2              Delay2us(5);//延时器件在10us内采样
  62   2              ds=1;//释放总线控制权
  63   2              com>>=1;//右移1位，写下一位
  64   2          }
  65   1      }
  66          
  67          Temperature_value Read18B20_Temperature(void) //读取寄存器中存储的温度数据
  68          {
  69   1            unsigned char Temp_L,Temp_H,temp;
  70   1            Temperature_value  stemp;
  71   1        
  72   1            uint tempv=0;
  73   1                
  74   1            dsreset();            //复位
  75   1            tempwritebyte(0xcc);  // 写跳过读ROM指令
  76   1            tempwritebyte(0x44);  // 写温度转换指令
  77   1            while(!ds);//等待转换完成
  78   1              
  79   1            dsreset();            //复位
  80   1            tempwritebyte(0xcc);  // 写跳过读ROM指令
  81   1            tempwritebyte(0xbe);  //读取暂存器字节命令
  82   1            
  83   1            Temp_L=tempread();    //读低8位
  84   1            Temp_H=tempread();    //读高8位
  85   1            dsreset();            //复位
  86   1            
  87   1            tempv=Temp_H;
  88   1            tempv=tempv<<8|Temp_L; //两个字节组合为1个字.int型数据
  89   1            
  90   1            temp=(uchar)(tempv>>4);//去掉小数部分，化成char型数据
  91   1            
  92   1            if((Temp_H&0x80)==0x80)//如果是负温度
  93   1            {
  94   2                stemp.tempflag=1;//负号显示
  95   2                stemp.tempr=~temp+1;//实际温度为读取值的补码
  96   2                stemp.fraction=fractioncode[(~Temp_L+1)&0x0f];//取小数补码，将16刻度转换为10刻度，精度位0.1度
  97   2            }else
  98   1            {
  99   2              stemp.tempflag=0;//正号显示
 100   2              stemp.tempr=temp;
 101   2              stemp.fraction=fractioncode[Temp_L&0x0f];//取小数补码，将16刻度转换为10刻度，精度位0.1度
 102   2            }
 103   1        return stemp;
 104   1      }
 105          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    289    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.0.0   DS18B20                                                           05/19/2021 23:08:33 PAGE 3   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
